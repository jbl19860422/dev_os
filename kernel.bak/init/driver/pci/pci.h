#ifndef _PCI_H_#define _PCI_H_#include "typedefs.h"#define PCI_ADDR_REG 0xcf8#define PCI_DATA_REG 0xcfc#define MAX_CLASS_DEVICE 20#pragma pack(1)typedef struct{	u16 u16_venderid;	u16 u16_deviceid;	u16 u16_command;	u16 u16_status;	u8 u8_revision;	u8 u8_PIFlag;	u8 u8_subclass;	u8 u8_class;	u8 u8_cacheline_size;	u8 u8_latency_timer;	u8 u8_header_type;	u8 u8_BIST;		u32 u32_base_addr[6];	u32 u32_cis_pointer;	u16 u16_sub_venderid;	u16 u16_sub_deviceid;	u32 u32_exprom_addr;	u32 u32_reserved[2];	u8 u8_irqline;	u8 u8_irqpin;	u8 u8_min_gnt;	u8 u8_max_lat;}pci_config_head_t;#define pci_reg_offset(reg) ((u8)(&((pci_config_head_t*)0)->reg))typedef struct{	pci_config_head_t config_head;}pci_device_t;#pragma pack()u8 	read_pci_config_reg_u8(u8 bus, u8 device, u8 function, u8 addr);u16 read_pci_config_reg_u16(u8 bus, u8 device, u8 function, u8 addr);u32 read_pci_config_reg_u32(u8 bus, u8 device, u8 function, u8 addr);int detect_pci_device(u8 bus, u8 device, u8 function, pci_device_t *pPciDev);void find_pci_devices_by_class(u8 class, u8 subclass, pci_device_t devs[MAX_CLASS_DEVICE], u32 *count);#endif